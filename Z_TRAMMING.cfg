# This is a Z Tramming macro created for the Sovol SV06 Plus.
#
# This macro measures the opposite ends of the X axis to determine
# if the Z screws are misaligned.
#
# The ajustment is done in hours, same as the SCREW_TILT_ADJUST
# macro. Meaning that "minutes" refers to "minutes of a clock face".
# So, for example, 15 minutes is a quarter of a full turn.
# 01:20 means 1 full turn and 20 minutes. As for direction,
# CW means clockwise and CCW means counter-clockwise.
# 
# BEFORE USING IT, READ THE DOCUMENTATION FULLY!
# IF USED WRONG, THIS MACRO MAY CAUSE DAMEGE TO YOUR PRINTER!
# I'm not responsible for any damage caused to your printer.
# 
# Full documentation at: https://github.com/GatoMiopia/Klipper_Z_Tramming

[gcode_macro Z_TRAMMING]
variable_tolerance: 0.05    # Set the tolerance in mm
variable_screw_pitch: 4    # Set lead screw pitch (See documentation for how to calculated).
description: Measures the opposite ends of the X axis to determine if the Z screws are misaligned.
gcode:
    # Points to probe (on the SV06+)
    {% set LEFT = 0 %} # Left most probe point
    {% set RIGHT = 246 %} # Right equivalent probe point
    {% set MIDDLE_Y = 170 %} # Middle of the bed on the Y axis
    {% set SPEED = 6000 %} # Travel speed between probes

    # Save print state
    {% if printer["gcode_macro _Z_TRAMMING_RESUME"].saved == 0 %}
      SET_GCODE_VARIABLE MACRO=_Z_TRAMMING_RESUME VARIABLE=saved VALUE=1
      SAVE_GCODE_STATE NAME=z_tramming_pause
    {% endif %}

    # Home, if not already
    {% if printer.toolhead.homed_axes != "xyz" %}
      G28
    {% endif %}
    G90
    G1 Y{MIDDLE_Y} Z10

    # Probe right side
    G1 X{RIGHT} F{SPEED}
    PROBE
    _Z_TRAMMING_SET_VARIABLE NAME=right_probe
    G1 Z10

    # Probe left side
    G1 X{LEFT} F{SPEED}
    PROBE
    _Z_TRAMMING_SET_VARIABLE NAME=left_probe
    G1 Z10
    
    _Z_TRAMMING_EVALUATE

[gcode_macro _Z_TRAMMING_EVALUATE]
variable_left_probe: 0
variable_right_probe: 0
gcode:
    # Set parameters
    {% set tolerance = printer["gcode_macro Z_TRAMMING"].tolerance %}
    {% set left_probe = printer["gcode_macro _Z_TRAMMING_EVALUATE"].left_probe %}
    {% set right_probe = printer["gcode_macro _Z_TRAMMING_EVALUATE"].right_probe %}
    {% set screw_pitch = printer["gcode_macro Z_TRAMMING"].screw_pitch %}

    # Print tolerance
    {action_respond_info("--------------------------------------")}
    {action_respond_info("Tolerance: " ~ tolerance ~ " mm")}
    
    # Compare sides
    {% if left_probe - right_probe > tolerance %}
        {action_respond_info("--------------------------------------")}
        {action_respond_info("01:20 means 1 full turn and 20 minutes, CW=clockwise, CCW=counter-clockwise")}
        {% set hours = ((left_probe - right_probe) / screw_pitch)|round(1, "floor")|int %}
        {% set minutes = ((((left_probe - right_probe) / screw_pitch)* 60) % 60)|round(1, "floor")|int %}
        {action_respond_info("Right lead screw:" ~ hours ~ ":" ~ minutes ~ " CCW")}
        {action_respond_info("Right is " ~ '%0.2f'| format(left_probe - right_probe|float) ~ " mm higher")}
        M18
        # Uncommenting the step below MAY DAMAGE YOUR PRINTER.
        # Make sure you've read the documentation and undestand the usage and the risks!
        # Use at your own risk.
        #SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0
        {action_respond_info("Steppers disabled and print paused. Run Z_TRAMMING again to resume.")}
        _Z_TRAMMING_ERROR
    {% elif left_probe - right_probe < tolerance * -1 %}
        {action_respond_info("--------------------------------------")}
        {action_respond_info("01:20 means 1 full turn and 20 minutes, CW=clockwise, CCW=counter-clockwise")}
        {% set hours = ((right_probe - left_probe) / screw_pitch)|round(1, "floor")|int %}
        {% set minutes = ((((right_probe - left_probe) / screw_pitch)* 60) % 60)|round(1, "floor")|int %}
        {action_respond_info("Right lead screw: " ~ hours ~ ":" ~ minutes ~ " CW")}
        {action_respond_info("Right is " ~ '%0.2f'| format(right_probe - left_probe|float) ~ " mm lower")}
        M18
        # Uncommenting the step below MAY DAMAGE YOUR PRINTER.
        # Make sure you've read the documentation and undestand the usage and the risks!
        # Use at your own risk.
        #SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0
        {action_respond_info("Steppers disabled and print paused. Run Z_TRAMMING again to resume.")}
        _Z_TRAMMING_ERROR
    {% else %}
        {action_respond_info("--------------------------------------")}
        {% if left_probe > right_probe %}
            {action_respond_info("Right is " ~ '%0.2f'| format(left_probe - right_probe|float) ~ " mm higher")}
        {% else %}
            {action_respond_info("Right is " ~ '%0.2f'| format(right_probe - left_probe|float) ~ " mm lower")}
        {% endif %}
        {action_respond_info("Within tolerance.")}
    {% endif %}
    {action_respond_info("--------------Adjustment--------------")}

    {% if printer.toolhead.homed_axes == "xyz" %}
      G28 Z
    {% else %}
      G28
    {% endif %}
    M400
    _Z_TRAMMING_RESUME

[gcode_macro _Z_TRAMMING_SET_VARIABLE]
gcode:
    SET_GCODE_VARIABLE MACRO=_Z_TRAMMING_EVALUATE VARIABLE={params.NAME} VALUE={printer.probe.last_z_result}

[gcode_macro _Z_TRAMMING_ERROR]
gcode:
    {action_raise_error("Z axis out of tolerance!")}

[gcode_macro _Z_TRAMMING_RESUME]
variable_saved: 0
gcode:
    SET_GCODE_VARIABLE MACRO=_Z_TRAMMING_RESUME VARIABLE=saved VALUE=0
    RESTORE_GCODE_STATE NAME=z_tramming_pause MOVE=1