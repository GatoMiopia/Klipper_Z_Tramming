# This is a Z Tramming macro created for the Sovol SV06 Plus.
#
# This macro measures the opposite ends of the X axis to determine
# if the Z screws are misaligned.
#
# The ajustment is done in hours, same as the SCREW_TILT_ADJUST
# macro. Meaning that "minutes" refers to "minutes of a clock face".
# So, for example, 15 minutes is a quarter of a full turn.
# 01:20 means 1 full turn and 20 minutes. As for direction,
# CW means clockwise and CCW means counter-clockwise.
# 
# BEFORE USING IT, READ THE DOCUMENTATION FULLY!
# IF USED WRONG, THIS MACRO MAY CAUSE DAMEGE TO YOUR PRINTER!
# I'm not responsible for any damage caused to your printer.
# 
# Full documentation at: https://github.com/GatoMiopia/Klipper_Z_Tramming

# Module loaded for Mailsail Macro Prompts
[respond]

[gcode_macro Z_TRAMMING]
variable_mainsail: 0          # Set 1 if you're using Mainsail 2.9 or higher
variable_tolerance: 0.05      # Set the tolerance in mm
variable_screw_pitch: 4       # Set lead screw pitch (See documentation for how to calculated).
variable_advanced_mode: 0     # If you do not know what this does, DO NOT CHANGE IT!
description: Measures the opposite ends of the X axis to determine if the Z screws are misaligned.
gcode:
    # Points to probe (on the SV06+)
    {% set LEFT_X = 5 %}      # Front left X screw position
    {% set RIGHT_X = 244 %}   # Front right X screw position
    {% set Y_AXIS = 55 %}     # Y axis screws position
    {% set SPEED = 10000 %}   # Travel speed between probes

    # Home, if not already
    {% if printer.toolhead.homed_axes != "xyz" %}
      G28
    {% endif %}
    G90
    G1 Z10

    # Probe right side
    G1 X{RIGHT_X} Y{Y_AXIS} F{SPEED}
    PROBE
    _Z_TRAMMING_SET_VARIABLE NAME=right_probe
    G1 Z10

    # Probe left side
    G1 X{LEFT_X} Y{Y_AXIS} F{SPEED}
    PROBE
    _Z_TRAMMING_SET_VARIABLE NAME=left_probe
    G1 Z10
    
    _Z_TRAMMING_EVALUATE

[gcode_macro _Z_TRAMMING_EVALUATE]
variable_left_probe: 0
variable_right_probe: 0
gcode:
    # Set parameters
    {% set tolerance = printer["gcode_macro Z_TRAMMING"].tolerance %}
    {% set left_probe = printer["gcode_macro _Z_TRAMMING_EVALUATE"].left_probe %}
    {% set right_probe = printer["gcode_macro _Z_TRAMMING_EVALUATE"].right_probe %}
    {% set screw_pitch = printer["gcode_macro Z_TRAMMING"].screw_pitch %}

    # Print tolerance
    {action_respond_info("--------------------------------------")}
    {action_respond_info("Tolerance: " ~ tolerance ~ " mm")}
    
    # Compare sides
    {% if left_probe - right_probe > tolerance %}
        {action_respond_info("--------------------------------------")}
        {action_respond_info("01:20 means 1 full turn and 20 minutes, CW=clockwise, CCW=counter-clockwise")}
        {% set hours = ((left_probe - right_probe) / screw_pitch)|round(1, "floor")|int %}
        {% set minutes = ((((left_probe - right_probe) / screw_pitch)* 60) % 60)|round(1, "floor")|int %}
        {action_respond_info("Turn the right lead screw:" ~ hours ~ ":" ~ minutes ~ " CCW")}
        {action_respond_info("Right is " ~ '%0.2f'| format(left_probe - right_probe|float) ~ " mm higher")}
        {% if printer["gcode_macro Z_TRAMMING"].advanced_mode == 1 %}
            SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0
        {% else %}
            M18
        {% endif %}
        {action_respond_info("Steppers disabled and print canceled. Run Z_TRAMMING to check again.")}
        {% if printer["gcode_macro Z_TRAMMING"].mainsail == 1 %}
            RESPOND TYPE=command MSG=action:prompt_end
            RESPOND TYPE=command MSG="action:prompt_begin Z axis out of tolerance"
            RESPOND TYPE=command MSG="action:prompt_text Set tolerance is {tolerance} mm"
            RESPOND TYPE=command MSG="action:prompt_text Right is {'%0.2f'| format(left_probe - right_probe|float)} mm higher"
            RESPOND TYPE=command MSG="action:prompt_text Turn the right lead screw {hours}:{minutes} CCW"
            RESPOND TYPE=command MSG="action:prompt_text 01:20 means 1 full turn and 20 minutes, CW=clockwise, CCW=counter-clockwise"
            RESPOND TYPE=command MSG="action:prompt_footer_button CANCEL|_Z_TRAMMING_CANCEL|error"
            RESPOND TYPE=command MSG="action:prompt_footer_button Retry|_Z_TRAMMING_RETRY|primary"
            RESPOND TYPE=command MSG="action:prompt_show"
        {% endif %}
        _Z_TRAMMING_ERROR MSG="Z axis out of tolerance!"
        
    {% elif left_probe - right_probe < tolerance * -1 %}
        {action_respond_info("--------------------------------------")}
        {action_respond_info("01:20 means 1 full turn and 20 minutes, CW=clockwise, CCW=counter-clockwise")}
        {% set hours = ((right_probe - left_probe) / screw_pitch)|round(1, "floor")|int %}
        {% set minutes = ((((right_probe - left_probe) / screw_pitch)* 60) % 60)|round(1, "floor")|int %}
        {action_respond_info("Turn the right lead screw " ~ hours ~ ":" ~ minutes ~ " CW")}
        {action_respond_info("Right is " ~ '%0.2f'| format(right_probe - left_probe|float) ~ " mm lower")}
        {% if printer["gcode_macro Z_TRAMMING"].advanced_mode == 1 %}
            SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0
        {% else %}
            M18
        {% endif %}
        {action_respond_info("Steppers disabled and print canceled. Run Z_TRAMMING to check again.")}
        {% if printer["gcode_macro Z_TRAMMING"].mainsail == 1 %}
            RESPOND TYPE=command MSG=action:prompt_end
            RESPOND TYPE=command MSG="action:prompt_begin Z axis out of tolerance"
            RESPOND TYPE=command MSG="action:prompt_text Set tolerance is {tolerance} mm"
            RESPOND TYPE=command MSG="action:prompt_text Right is {'%0.2f'| format(right_probe - left_probe|float)} mm lower"
            RESPOND TYPE=command MSG="action:prompt_text Turn the right lead screw {hours}:{minutes} CW"
            RESPOND TYPE=command MSG="action:prompt_text 01:20 means 1 full turn and 20 minutes, CW=clockwise, CCW=counter-clockwise"
            RESPOND TYPE=command MSG="action:prompt_footer_button CANCEL|_Z_TRAMMING_CANCEL|error"
            RESPOND TYPE=command MSG="action:prompt_footer_button Retry|_Z_TRAMMING_RETRY|primary"
            RESPOND TYPE=command MSG="action:prompt_show"
        {% endif %}
        _Z_TRAMMING_ERROR MSG="Z axis out of tolerance!"
        
    {% else %}
        {action_respond_info("--------------------------------------")}
        RESPOND TYPE=command MSG=action:prompt_end

        #Create prompt
        {% if printer["gcode_macro Z_TRAMMING"].mainsail == 1 and printer["gcode_macro _Z_TRAMMING_CANCEL".canceled == 1] %}
            RESPOND TYPE=command MSG="action:prompt_begin Z within tolerance"
            RESPOND TYPE=command MSG="action:prompt_text Set tolerance is {tolerance} mm"
        {% endif %}
        
        {% if left_probe > right_probe %}
            {action_respond_info("Right is " ~ '%0.2f'| format(left_probe - right_probe|float) ~ " mm higher")}
            {% if printer["gcode_macro Z_TRAMMING"].mainsail == 1 and printer["gcode_macro _Z_TRAMMING_CANCEL".canceled == 1] %}
                RESPOND TYPE=command MSG="action:prompt_text Right is {'%0.2f'| format(left_probe - right_probe|float)} mm higher"
            {% endif %}
        {% else %}
            {action_respond_info("Right is " ~ '%0.2f'| format(right_probe - left_probe|float) ~ " mm lower")}
            {% if printer["gcode_macro Z_TRAMMING"].mainsail == 1 and printer["gcode_macro _Z_TRAMMING_CANCEL".canceled == 1] %}
                RESPOND TYPE=command MSG="action:prompt_text Right is {'%0.2f'| format(right_probe - left_probe|float)} mm lower"
            {% endif %}
        {% endif %}
        {action_respond_info("If your print was cancelled, you may restart it now.")}
        {action_respond_info("Within tolerance.")}

        # End prompt
        {% if printer["gcode_macro Z_TRAMMING"].mainsail == 1 and printer["gcode_macro _Z_TRAMMING_CANCEL".canceled == 1] %}
            RESPOND TYPE=command MSG="action:prompt_text The difference is within tolerance"
            RESPOND TYPE=command MSG="action:prompt_text If your print was cancelled, you may restart it now."
            RESPOND TYPE=command MSG="action:prompt_show"
        {% endif %}
        SET_GCODE_VARIABLE MACRO=_Z_TRAMMING_CANCEL VARIABLE=canceled VALUE=0
        
    {% endif %}
    {action_respond_info("--------------Adjustment--------------")}

    {% if printer.toolhead.homed_axes == "xyz" %}
      G28 Z
    {% else %}
      G28
    {% endif %}
    M400

[gcode_macro _Z_TRAMMING_SET_VARIABLE]
gcode:
    SET_GCODE_VARIABLE MACRO=_Z_TRAMMING_EVALUATE VARIABLE={params.NAME} VALUE={printer.probe.last_z_result}

[gcode_macro _Z_TRAMMING_ERROR]
gcode:
    SET_GCODE_VARIABLE MACRO=_Z_TRAMMING_CANCEL VARIABLE=canceled VALUE=1
    {action_raise_error(params.MSG)}

[gcode_macro _Z_TRAMMING_RETRY]
gcode:
    RESPOND TYPE=command MSG=action:prompt_end
    Z_TRAMMING

[gcode_macro _Z_TRAMMING_CANCEL]
variable_canceled: 0
gcode:
    RESPOND TYPE=command MSG=action:prompt_end
    G28
    _Z_TRAMMING_ERROR MSG="Z Tramming Canceled"
